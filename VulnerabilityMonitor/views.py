import time
import json
import github
import datetime
import requests
from github import Github
from Configuration.models import Configuration
from VulnerabilityMonitor.models import VulnerabilityMonitorTask, VulnerbilityMonitorResult

# Create your views here.
def get_yesterday():
    return datetime.datetime.today() - datetime.timedelta(days=1)


class GithubScanner:
    def __init__(self, task_id):
        self.token = Configuration.objects.filter(name="3").values_list("value")[0][0]
        self.scanner = None
        self.keyword = VulnerabilityMonitorTask.objects.filter(id=task_id).values_list("keyword")[0][0]
        self.result = None

    def login(self):
        try:
            self.scanner = Github(login_or_token=self.token)
        except Exception as exception:
            print(exception)

    def close(self):
        del self.scanner
        self.scanner = None

    def scan(self):
        if self.scanner is None:
            return
        else:
            try:
                self.result = self.scanner.search_repositories(query=self.keyword, sort="updated", order="desc")
            except Exception as exception:
                print(exception)


class VulnerabilityMonitor:
    def __init__(self, tid):
        self.github_scanner = GithubScanner(task_id=int(tid))
        try:
            self.github_scanner.login()
        except Exception as exception:
            print(exception)
            self.github_scanner = None
        self.yesterday = get_yesterday()

    def close(self):
        self.github_scanner.close()

    def search(self):
        self.github_scanner.scan()
        if self.github_scanner.result is None:
            return
        else:
            results = self.github_scanner.result
            count = results.totalCount
            index = 0
            while index < count:
                try:
                    result = results[index]
                    update_time = result.updated_at
                    if update_time >= self.yesterday:
                        pname = result.name
                        link = result.html_url
                        uname = link.split('/')[3]
                        _result = {
                            "username": uname,
                            "projectname": pname,
                            "linkurl": link,
                        }
                        VulnerbilityMonitorResult.objects.create(**_result)
                        time.sleep(2)
                    index += 1
                except Exception as exception:
                    print(exception)
                    index += 1
                    time.sleep(30)
                    continue

def start_monitor(id):
    monitor = VulnerabilityMonitor(id)
    monitor.search()
    monitor.close()

def start():
    id_list = list(VulnerabilityMonitorTask.objects.values_list('id',flat=True))
    for id in id_list:
        start_monitor(id)

